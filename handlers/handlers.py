__all__ = [
    "register_message_handler",
]


import logging

from aiogram import Router, F
from aiogram import types
from aiogram.filters.command import Command
from sqlalchemy.ext.asyncio import AsyncSession

from db import async_session_maker, User
from .callbacks import callback_continue
from .keyboards import register_buttons

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


async def help_command(message: types.Message):
    help_str = """–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç <b><i>ranhahaha_bot</i></b>
    üí¨ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>/start</b>
    üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>/status</b>"""

    await message.reply(text=help_str, parse_mode="HTML")
    logging.info(f"user {message.from_user.id} asked for help")


async def status_command(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

    async with async_session_maker() as session:
        session: AsyncSession

        current_user = await session.get(User, message.from_user.id)

        if current_user:
            str = f"""<b><i>–°—Ç–∞—Ç—É—Å</i></b>
                            –í–∞—à ID - {current_user.id}
                            –í–∞—à–µ –∏–º—è - {current_user.name}
                            –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - {current_user.reg_date}"""

            if current_user.token:
                str += f"\n–¢–æ–∫–µ–Ω - {current_user.token}"

            if current_user.teacher_id:
                teacher = await session.get(User, current_user.teacher_id)

                str += f"\n–í—ã —Å–ª—É—à–∞—Ç–µ–ª—å —É - {teacher.name}"

            await message.reply(text=str, parse_mode="HTML")
        else:
            await message.reply(text="–ù–∏—á–µ–≥–æ –æ –í–∞—Å –Ω–µ –∑–Ω–∞–µ–º! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è /start")

        await session.close()

        logging.info(f"user {message.from_user.id} requested status")


async def start_command(message: types.Message):
    async with async_session_maker() as session:
        session: AsyncSession

        user = await session.get(User, message.from_user.id)

        if user is None:
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ä–æ–ª—å:", reply_markup=register_buttons)
        else:
            if user.teacher_id:
                user_teacher = await session.get(User, user.teacher_id)
                await message.reply(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å —É {user_teacher.name}")
            else:
                await message.reply(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —é–∑–µ—Ä–æ–≤ –ø—Ä–∏—à–ª–∏—Ç–µ –∏–º —Å–≤–æ–π Id /status")

        await session.close()
        logging.info(f"user {message.from_user.id} started the bot")


def register_message_handler(router: Router):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è"""
    router.message.register(start_command, Command(commands=["start"]))
    router.message.register(status_command, Command(commands=["status"]))
    router.message.register(help_command, Command(commands=["help"]))

    #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ /start, —Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É
    router.callback_query.register(callback_continue, F.data.startswith("register_"))
