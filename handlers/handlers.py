__all__ = [
    "register_message_handler",
]

import logging
from aiogram import Router, F
from aiogram import types
from aiogram.filters.command import Command
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncSession

from config import REGISTER_URL
from db import async_session_maker, User
from db.models import YandexFolder
from yandex import YandexDisk
from sqlalchemy import select
from .callbacks import start_command_callback
from .keyboards import register_buttons

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

class Form(StatesGroup):
    waitingid = State()

async def help_command(message: types.Message):
    help_str = """–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç <b><i>ranhahaha_bot</i></b>
    üí¨ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>/start</b>
    üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>/status</b>"""

    await message.reply(text=help_str, parse_mode="HTML")
    logging.info(f"user {message.from_user.id} asked for help")


async def status_command(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

    async with async_session_maker() as session:
        session: AsyncSession

        current_user = await session.get(User, message.from_user.id)

        if current_user:
            str = f"""<b><i>–°—Ç–∞—Ç—É—Å</i></b>
                            –í–∞—à ID - {current_user.id}
                            –í–∞—à–µ –∏–º—è - {current_user.name}
                            –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - {current_user.reg_date}"""

            if current_user.token:
                str += f"\n–¢–æ–∫–µ–Ω - {current_user.token}"

            if current_user.teacher_id:
                teacher = await session.get(User, current_user.teacher_id)

                str += f"\n–í—ã —Å–ª—É—à–∞—Ç–µ–ª—å —É - {teacher.name}"

            await message.reply(text=str, parse_mode="HTML")
        else:
            await message.reply(text="–ù–∏—á–µ–≥–æ –æ –í–∞—Å –Ω–µ –∑–Ω–∞–µ–º! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è /start")

        await session.close()

        logging.info(f"user {message.from_user.id} requested status")


async def start_command(message: types.Message):
    async with async_session_maker() as session:
        session: AsyncSession

        user = await session.get(User, message.from_user.id)

        arr = message.text.split()

        if len(arr) == 2:
            id = int(arr[1].strip())

            teachermodel = await session.get(User, id)

            if teachermodel is None:
                await message.answer("–û—à–∏–±–∫–∞ –∞–π–¥–∏")
            else:
                new_user = User(id=message.from_user.id, teacher_id=id, name=message.from_user.username)
                session.add(new_user)

                await message.answer(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å")

            logging.info(f"user {message.from_user.id} registered as a new student")

            await session.commit()
            await session.close()
        elif user is None:
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ä–æ–ª—å:", reply_markup=register_buttons)
        else:
            if user.teacher_id:
                user_teacher = await session.get(User, user.teacher_id)
                await message.reply(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å —É {user_teacher.name}")
            else:
                await message.reply(
                    f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —é–∑–µ—Ä–æ–≤ –ø—Ä–∏—à–ª–∏—Ç–µ –∏–º —Å–≤–æ–π Id /status")

        await session.close()

        logging.info(f"user {message.from_user.id} started the bot")


async def register_command(message: types.Message):
    text = (f"–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ —Å–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º:\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ <a href=\"{REGISTER_URL}\">—Å—Å—ã–ª–∫—É</a>\n"
            f"2. –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –≤ –Ø–î–∏—Å–∫–µ —á–µ—Ä–µ–∑ —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
            f"3. –í—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ /token –¢–û–ö–ï–ù")
    await message.reply(text=text, parse_mode="HTML")

    logging.info(f"user {message.from_user.id} instructions")


async def token_command(message: types.Message):
    async with async_session_maker() as session:
        session: AsyncSession
        teacher_model = await session.get(User, message.from_user.id)
        if teacher_model.teacher_id is not None:
            await message.reply("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é!")
        else:
            tokentext = message.text.split()

            if len(tokentext) == 2:
                token = tokentext[1].strip()

                client = YandexDisk(token=token)
                valid = await client.valid()

                if valid:
                    await message.reply(f"–£—Å–ø–µ—à–Ω–æ! –í—ã –¥–æ–±–∞–≤–∏–ª–∏ / –æ–±–Ω–æ–≤–∏–ª–∏ —Ç–æ–∫–µ–Ω")

                    # save
                    teacher_model.token = token
                else:
                    await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏!")

            else:
                await message.reply("–£–∑–Ω–∞—Ç—å –í–∞—à –¢–û–ö–ï–ù - /status. –î–æ–±–∞–≤–∏—Ç—å –¢–û–ö–ï–ù —Å –ø–æ–º–æ—â—å—é /token –í–ê–®_–¢–û–ö–ï–ù")

        logging.info(f"user {message.from_user.id} pressed token")
        await session.commit()


async def add_command(message: types.Message):
    async with async_session_maker() as session:
        session: AsyncSession
        arr = message.text.split()

        if len(arr) == 2:
            foldername = arr[1].strip()
            teachermodel = await session.get(User, message.from_user.id)

            if teachermodel.teacher_id:
                await message.reply("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é!")
            elif not teachermodel.token:
                await message.reply("–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω /token")
            else:
                new = YandexFolder(teacher_id=teachermodel.id, name=foldername)
                session.add(new)

                await message.reply(f"–ü–∞–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –¥–ª—è –í–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        else:
            await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ /add –ù–ê–ó–í–ê–ù–ò–ï")
        logging.info(f"user {message.from_user.id} add folder pressed")

        await session.commit()
        await session.close()


async def delete_command(message: types.Message):
    async with async_session_maker() as session:
        session: AsyncSession
        arr = message.text.split()

        if len(arr) == 2:
            foldername = arr[1].strip()
            teachermodel = await session.get(User, message.from_user.id)

            if teachermodel.teacher_id:
                await message.reply("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é!")
            else:
                f = select(YandexFolder).filter(YandexFolder.teacher_id == teachermodel.id, YandexFolder.name == foldername)

                result = await session.execute(f)
                yandexfolder = result.scalars().first()

                if not yandexfolder:
                    await message.reply("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return

                await session.delete(yandexfolder)

                await message.reply(f"–£—Å–ø–µ—à–Ω–æ! –ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        else:
            await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ /add –ù–ê–ó–í–ê–ù–ò–ï")

        logging.info(f"user {message.from_user.id} delete folder pressed")

        await session.commit()
        await session.close()

def register_message_handler(router: Router):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è"""
    router.message.register(start_command, Command(commands=["start"]))
    router.message.register(register_command, Command(commands=["register"]))
    router.message.register(status_command, Command(commands=["status"]))
    router.message.register(token_command, Command(commands=["token"]))
    router.message.register(help_command, Command(commands=["help"]))
    router.message.register(add_command, Command(commands=["add"]))
    router.message.register(delete_command, Command(commands=["delete"]))

    #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ /start, —Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É
    router.callback_query.register(start_command_callback, F.data.startswith("register_"))
